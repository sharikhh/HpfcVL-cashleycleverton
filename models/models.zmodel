enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?

    stripeCustomerId  String?

    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())

    organizationRoles OrganizationRole[]

    pwaSubscriptions  PwaSubscription[]  @relation("user")

    savedArticles     SavedArticle[]     @relation("user")
    watchlistItems    WatchlistItem[]    @relation("user")
    transactions      Transaction[]      @relation("user")
    financialGoals    FinancialGoal[]    @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Article {
    id                String         @id @default(uuid())
    title             String
    description       String?
    content           String?
    source            String
    url               String?
    publishDate       String
    thumbnailUrl      String?
    marketImpactScore String?
    sentiment         String?
    region            String?
    isTrending        Boolean
    lastFetchedAt     DateTime?      @default(now())
    savedArticles     SavedArticle[] @relation("article")
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt @default(now())
    @@allow("all", true)
}

model Stock {

    id             String          @id @default(uuid())
    symbol         String
    name           String
    sector         String?
    marketCap      String?
    currentPrice   String

    watchlistItems WatchlistItem[] @relation("stock")
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt @default(now())
    @@allow("all", true)
}

model SavedArticle {

    id        String   @id @default(uuid())

    articleId String
    article   Article? @relation(fields: [articleId], references: [id], name: "article")
    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model WatchlistItem {

    id             String        @id @default(uuid())

    stockId        String
    stock          Stock?        @relation(fields: [stockId], references: [id], name: "stock")
    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Transaction {

    id             String        @id @default(uuid())
    amount         String
    type           String
    category       String?
    description    String?
    date           String

    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model FinancialGoal {

    id             String        @id @default(uuid())
    name           String
    targetAmount   String
    currentAmount  String
    deadline       String?

    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Organization {
    id               String             @id @default(uuid())
    name             String
    pictureUrl       String?            @default('https://i.imgur.com/BgkFiid.jpeg')

    stripeCustomerId String?

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt @default(now())
    roles            OrganizationRole[]

    watchlistItems   WatchlistItem[]    @relation("organization")
    transactions     Transaction[]      @relation("organization")
    financialGoals   FinancialGoal[]    @relation("organization")

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}

model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt @default(now())

    userId         String       @default(auth().id)
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

model PwaSubscription {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    userId    String   @default(auth().id)
    user      User     @relation(fields: [userId], references: [id], name: 'user')

    @@allow("all", true)
}

      